# SpellChecker-Plugin Workflow
# Used the following repos as inspiration
#  - https://github.com/OneMoreGres/qtc-dbviewer/blob/4.13.0/.github/workflows/build.yml
#  - https://www.qt.io/blog/building-qt-creator-plugins-with-github-actions
# Using PowerShell Core since I am trying to learn using it, seemed like a good fit for cross platform scripting.

name: Build SpellChecker-Plugin

# Controls when the action will run. Triggers the workflow on any push event.
on: [push]
env:
  PLUGIN_NAME: SpellChecker-Plugin
  QT_VERSION: 6.8.2
  QT_CREATOR_VERSION: 16.0.0
  MACOS_DEPLOYMENT_TARGET: "11.0"
  CMAKE_VERSION: "3.29.6"
  NINJA_VERSION: "1.12.1"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    outputs:
        tag: ${{ steps.git.outputs.tag }}
    strategy:
      matrix:
        config:
        - {
            name: "win64",
            os: windows-latest,
            platform: windows_x64,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
          }
        - {
            name: "linux",
            os: ubuntu-latest,
            platform: linux_x64,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macos",
            os: macos-13,
            platform: mac_x64,
            cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      id: git
      shell: cmake -P {0}
      run: |
        if (${{github.ref}} MATCHES "tags/v(.*)")
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${CMAKE_MATCH_1}")
        else()
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${{github.run_id}}")
        endif()

    - name: Download Ninja and CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}
        ninjaVersion: ${{ env.NINJA_VERSION }}

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Install system libs
      shell: cmake -P {0}
      run: |
        if ("${{ matrix.config.platform }}" STREQUAL "linux_x64")
          execute_process(
            COMMAND sudo apt-get update
          )
          execute_process(
            COMMAND sudo apt-get install -y libgl1-mesa-dev
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Failed to install dependencies")
          endif()
        elseif ("${{ matrix.config.platform }}" STREQUAL "linux_arm64")
          execute_process(COMMAND sudo dpkg --add-architecture arm64)

          # TODO: Check to see if the azure.ubuntu added arm64 support
          execute_process(COMMAND sudo apt-get install -y bash curl apt-transport-https ca-certificates)
          execute_process(COMMAND sudo curl https://raw.githubusercontent.com/vegardit/fast-apt-mirror.sh/v1/fast-apt-mirror.sh -o /usr/local/bin/fast-apt-mirror.sh)
          execute_process(COMMAND sudo chmod 755 /usr/local/bin/fast-apt-mirror.sh)

          #execute_process(COMMAND sudo /usr/local/bin/fast-apt-mirror.sh set https://mirrors.ocf.berkeley.edu/ubuntu-ports/)
          execute_process(COMMAND sudo /usr/local/bin/fast-apt-mirror.sh set https://mirror.kumi.systems/ubuntu-ports/)

          execute_process(
            COMMAND sudo apt-get update
          )
          execute_process(
            COMMAND
              sudo apt-get install -y crossbuild-essential-arm64 libgl1-mesa-dev:arm64
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Failed to install dependencies")
          endif()
        endif()

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version "$ENV{QT_VERSION}")

        function(download_qt platform export_qt_dir)
          string(REPLACE "." "" qt_version_dotless "${qt_version}")
          if (platform STREQUAL "windows_x64")
            set(url_os "windows_x86")
            set(qt_package_arch_suffix "win64_msvc2022_64")
            set(qt_dir_prefix "${qt_version}/msvc_64")
            set(qt_package_suffix "-Windows-Windows_11_23H2-MSVC2022-Windows-Windows_11_23H2-X86_64")
          elseif (platform STREQUAL "windows_arm64")
            set(url_os "windows_x86")
            set(qt_package_arch_suffix "win64_msvc2022_arm64_cross_compiled")
            set(qt_dir_prefix "${qt_version}/msvc_arm64")
            set(qt_package_suffix "-Windows-Windows_11_23H2-MSVC2022-Windows-Windows_11_23H2-ARM64")
          elseif (platform STREQUAL "linux_x64")
            set(url_os "linux_x64")
            set(qt_package_arch_suffix "linux_gcc_64")
            set(qt_dir_prefix "${qt_version}/gcc_64")
            set(qt_package_suffix "-Linux-RHEL_8_10-GCC-Linux-RHEL_8_10-X86_64")
          elseif (platform STREQUAL "linux_arm64")
            set(url_os "linux_arm64")
            set(qt_package_arch_suffix "linux_gcc_arm64")
            set(qt_dir_prefix "${qt_version}/gcc_arm64")
            set(qt_package_suffix "-Linux-Ubuntu_24_04-GCC-Linux-Ubuntu_24_04-AARCH64")
          elseif (platform STREQUAL "mac_x64")
            set(url_os "mac_x64")
            set(qt_package_arch_suffix "clang_64")
            set(qt_dir_prefix "${qt_version}/macos")
            set(qt_package_suffix "-MacOS-MacOS_14-Clang-MacOS-MacOS_14-X86_64-ARM64")
          endif()

          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}/qt6_${qt_version_dotless}")
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt6/${qt_dir_prefix}" qt_dir)

          if (export_qt_dir)
            file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")
          endif()

          message("Downloading Qt to ${qt_dir}")
          function(downloadAndExtract url archive subdir)
            file(MAKE_DIRECTORY "${qt_dir}/${subdir}")
            message("Downloading ${url}")
            message("... extracting to ${qt_dir}/${subdir}")
            file(DOWNLOAD "${url}" "$ENV{GITHUB_WORKSPACE}/${archive}" SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "$ENV{GITHUB_WORKSPACE}/${archive}" WORKING_DIRECTORY "${qt_dir}/${subdir}")
          endfunction()

          foreach(package qtbase qtdeclarative)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              ""
            )
          endforeach()

          foreach(package qt5compat qtshadertools)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              ""
            )
          endforeach()

          # uic depends on libicu*.so
          if (platform STREQUAL "linux_x64")
            if (qt_version VERSION_LESS "6.7.0")
              set(uic_suffix "Rhel7.2-x64")
            else()
              set(uic_suffix "Rhel8.6-x86_64")
            endif()
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-${uic_suffix}.7z"
              icu.7z
              "lib"
            )
          endif()

          execute_process(COMMAND ${qt_dir}/bin/qmake -query)
        endfunction()

        if ("${{ matrix.config.platform }}" STREQUAL "windows_x64")
          download_qt(windows_x64 TRUE)
        elseif ("${{ matrix.config.platform }}" STREQUAL "windows_arm64")
          download_qt(windows_x64 FALSE)
          download_qt(windows_arm64 TRUE)
        elseif ("${{ matrix.config.platform }}" STREQUAL "linux_x64")
          download_qt(linux_x64 TRUE)
        elseif ("${{ matrix.config.platform }}" STREQUAL "linux_arm64")
          download_qt(linux_x64 FALSE)
          download_qt(linux_arm64 TRUE)
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          download_qt(mac_x64 TRUE)
        endif()

    - name: Download Qt Creator
      uses: qt-creator/install-dev-package@v1.6
      with:
        version: ${{ env.QT_CREATOR_VERSION }}
        unzip-to: 'qtcreator'
        platform: ${{ matrix.config.platform }}

    - name: Extract Qt Creator
      id: qt_creator
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtc_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qtc_dir=${qtc_dir}")

    - name: Build
      shell: pwsh
      run: |
        ${env:CMAKE_PRESET} = "conan-release"

        switch ("${{runner.os}}")
        {
            "Windows" {
                Write-Output "<+> Setting up MSBuild"
                # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                # The setup-msbuild action is not used since it does not set up the path to 'cl'
                # see: https://github.com/microsoft/setup-msbuild/issues/24
                ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                Write-Output "  <-> VS Install Path: ${VS_INST_PATH}"
                Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=${{matrix.config.arch}} -no_logo'
                ${env:CMAKE_PRESET} = "conan-default"
            }
            "macOS" {
                # From the build.py script: on macOS the prefix path must be inside the app bundle...
                ${prefix_extra}=";${{ steps.qt_creator.outputs.qtc_dir }}/Qt Creator.app/Contents/Resources"
            }
        }

        conan profile detect
        conan config install .conan
        conan install . -pr cpp20 --build=missing

        cmake --preset "${env:CMAKE_PRESET}" `
          -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }};${{ steps.qt_creator.outputs.qtc_dir }}${prefix_extra}" `
          -DCMAKE_INCLUDE_PATH="${env:GITHUB_WORKSPACE}/qtc_src/src/libs/3rdparty/syntax-highlighting/autogenerated/include"

        cmake --build --preset conan-release

    - name: Collect Binaries
      shell: pwsh
      run: |
        ${PLUGIN_DIR_BASE} = "Plugin/"
        ${PLUGIN_ARCHIVE}  = "SpellChecker-Plugin_QtC${env:QT_CREATOR_VERSION}_${{matrix.config.platform}}"

        switch ("${{runner.os}}")
        {
            "Windows" {
              ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/lib/qtcreator/plugins"
              New-Item -ItemType Directory "${PLUGIN_DIR_OUT}" -Force
              ${PLUGIN_OBJ} = Get-ChildItem -Path . -Filter SpellChecker.dll -Recurse -ErrorAction SilentlyContinue -Force | %{$_.FullName}
              Write-Output "PLUGIN_OBJ: ${PLUGIN_OBJ}"
              Copy-Item -Path "${PLUGIN_OBJ}" -Destination "${PLUGIN_DIR_OUT}/"
              Push-Location ${PLUGIN_DIR_BASE}
              ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.zip"
              7z a "${env:PLUGIN_ARCHIVE_NAME}" lib
              Pop-Location
            }
            "Linux" {
              ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/lib/qtcreator/plugins"
              New-Item -ItemType Directory "${PLUGIN_DIR_OUT}" -Force
              ${PLUGIN_OBJ} = Get-ChildItem -Path . -Filter libSpellChecker.so -Recurse -ErrorAction SilentlyContinue -Force | %{$_.FullName}
              Write-Output "PLUGIN_OBJ: ${PLUGIN_OBJ}"
              Copy-Item -Path "${PLUGIN_OBJ}" -Destination "${PLUGIN_DIR_OUT}/"
              Push-Location ${PLUGIN_DIR_BASE}
              ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.tar.gz"
              7z a -ttar "${PLUGIN_ARCHIVE}.tar" lib
              7z a -tgzip "${env:PLUGIN_ARCHIVE_NAME}" "${PLUGIN_ARCHIVE}.tar"
              Pop-Location
            }
            "macOS" {
              ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/bin/Qt Creator.app/Contents/PlugIns"
              New-Item -Path "${PLUGIN_DIR_OUT}" -ItemType Directory -Force
              ${PLUGIN_OBJ} = Get-ChildItem -Path . -Filter libSpellChecker.dylib -Recurse -ErrorAction SilentlyContinue -Force | %{$_.FullName}
              Write-Output "PLUGIN_OBJ: ${PLUGIN_OBJ}"
              Copy-Item -Path "${PLUGIN_OBJ}" -Destination "${PLUGIN_DIR_OUT}/"
              Get-ChildItem "${PLUGIN_DIR_OUT}"
              Push-Location ${PLUGIN_DIR_BASE}
              ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.tar.gz"
              7z a -ttar "${PLUGIN_ARCHIVE}.tar" bin
              7z a -tgzip "${env:PLUGIN_ARCHIVE_NAME}" "${PLUGIN_ARCHIVE}.tar"
              Pop-Location
            }
        }
        ${env:PLUGIN_ARCHIVE_FULL} = "${PLUGIN_DIR_BASE}/${env:PLUGIN_ARCHIVE_NAME}"

        Write-Output "PLUGIN_ARCHIVE_FULL=${{github.workspace}}/${env:PLUGIN_ARCHIVE_FULL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "PLUGIN_ARCHIVE_NAME=${env:PLUGIN_ARCHIVE_NAME}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: actions/upload-artifact@v4
      id: upload_artifact
      with:
        path: ${{env.PLUGIN_ARCHIVE_FULL}}
        name: ${{env.PLUGIN_ARCHIVE_NAME}}

    - name: Download release url
      if: contains(github.ref, '/tags/v')
      uses: actions/download-artifact@v4
      with:
        name: release_upload_url.txt
        path: ./

    - name: Set Release Var
      if: contains(github.ref, '/tags/v')
      shell: pwsh
      run: |
        ${RELEASE_URL} = Get-Content ./release_upload_url.txt
        Write-Output "Release URL: ${RELEASE_URL}"
        Write-Output "RELEASE_URL=${RELEASE_URL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload release artifacts
      if: contains(github.ref, '/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{env.RELEASE_URL}}
        asset_path: ${{env.PLUGIN_ARCHIVE_FULL}}
        asset_name: ${{env.PLUGIN_ARCHIVE_NAME}}
        asset_content_type: application/zip
