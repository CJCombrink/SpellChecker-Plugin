# SpellChecker-Plugin Workflow
# Used the following repos as inspiration
#  - https://github.com/OneMoreGres/qtc-dbviewer/blob/4.13.0/.github/workflows/build.yml
#  - https://www.qt.io/blog/building-qt-creator-plugins-with-github-actions
# Using PowerShell Core since I am trying to learn using it, seemed like a good fit for cross platform scripting.

name: Build SpellChecker-Plugin

# Controls when the action will run. Triggers the workflow on any push event.
on: [push]

env:
  QT_VERSION: "6.2.1"
  QT_CREATOR_VERSION: "7.0.0"
  QT_MIRRORS: download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirror.bit.edu.cn/qtproject

# The Jobs
jobs:
  # The release job.
  # If the github.ref contains /tags/v a release will be set up.
  # This is done before the builds to simplify the logic to upload the build artifacts to the release.
  # The release stage a file that contains the URL of where the build artifacts must go.
  # It is also executed only once, on one agent.
  release:
    name: Create release
    if: contains(github.ref, '/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        if: contains(github.ref, '/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Release for Qt Creator ${{env.QT_CREATOR_VERSION}}.

            Download the correct file based on operating system and architecture of Qt Creator.

            To deploy into Qt Creator, extract the archive into the root folder of where Qt Creator is installed.

            Please refer to the main page of the project for usage information.

            On Windows, make sure to download the correct version for the Qt Creator used, not the architecture of the Operating System.
            To check this: From Qt Creator, go to "Help" -> "About Qt Creator..."
            NOTE: From Qt Creator version 4.14 only 64 bit binaries are provided for Windows since Qt does not ship a 32 bit version of Qt Creator anymore. If this
            is a problem please file a bug and I can see if I can provide binaries in the mean time.

            Note 2: From next month I might start using Qt Creator again as my primary IDE at work (moving Jobs). This means that I might get back to
            development on the pugin instead of just maintenance and releases since I will start using the plugin again.
          draft: false
          prerelease: false

      - name: Store release url
        shell: pwsh
        run: Write-Output "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url.txt

      - name: Upload release url
        uses: actions/upload-artifact@v2
        with:
          path: ./release_upload_url.txt
          name: release_upload_url.txt

  # Build the plugin and upload the archives
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      OS: ${{ matrix.config.name }}
    strategy:
      matrix:
        config:
          - {
              name: "win64",
              os: windows-latest,
              sys: "windows",
              arch: "x64",
              qt_arch: "win64_msvc2019_64",
              qtc_platform: "windows_x64",
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
              is_msvc: true
            }
          - {
              name: "linux",
              os: ubuntu-latest,
              sys: "linux",
              arch: "x64",
              qt_arch: "",
              qtc_platform: "linux_x64"
            }
          - {
              name: "macos",
              os: macos-latest,
              sys: "osx",
              arch: "x64",
              qt_arch: "",
              qtc_platform: "mac_x64"
            }
      fail-fast: false

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE/SpellChecker-Plugin, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: SpellChecker-Plugin

      # Checks-out QtCreator repository under $GITHUB_WORKSPACE/qt-creator
      - uses: actions/checkout@v2
        with:
          repository: qt-creator/qt-creator
          path: qt-creator
          ref: ${{env.QT_CREATOR_VERSION}}

      - name: System Packages
        shell: pwsh
        run: |
          switch ("${{runner.os}}")
          {
            "Windows" { choco install ninja }
            "Linux"   { sudo apt update; sudo apt install libclang-dev libclang-12-dev libclang-11-dev ninja-build gettext libgl1-mesa-dev libvulkan-dev libxcb-xinput-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev }
            "macOS"   { brew update; brew install automake autoconf ninja }
          }

      # Install vcpkg and Hunspell for the correct compiler and OS.
      - name: Vcpkg - Hunspell
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: b86c0c35b88e2bf3557ff49dc831689c2f085090
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: true

      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: |
          set(qt_version ${{env.QT_VERSION}})

          string(REPLACE "." "" qt_version_dotless "${qt_version}")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(url_os "windows_x86")
            if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
              set(qt_package_arch_suffix "win64_msvc2019_64")
              set(qt_dir_prefix "${qt_version}/msvc2019_64")
              set(qt_package_suffix "-Windows-Windows_10-MSVC2019-Windows-Windows_10-X86_64")
            endif()
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(url_os "linux_x64")
            set(qt_package_arch_suffix "gcc_64")
            set(qt_dir_prefix "${qt_version}/gcc_64")
            set(qt_package_suffix "-Linux-RHEL_8_2-GCC-Linux-RHEL_8_2-X86_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(url_os "mac_x64")
            set(qt_package_arch_suffix "clang_64")
            set(qt_dir_prefix "${qt_version}/macos")
            set(qt_package_suffix "-MacOS-MacOS_11_00-Clang-MacOS-MacOS_11_00-X86_64-ARM64")
          endif()

          set(qt_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}")
          foreach(qt_mirror $ENV{QT_MIRRORS})
            cmake_language(EVAL CODE "
              message(\"Downloading: ${qt_base_url}/Updates.xml\")
              file(DOWNLOAD \"${qt_base_url}/Updates.xml\" ./Updates.xml)
            ")
            file(SIZE ./Updates.xml fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()

          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          file(MAKE_DIRECTORY qt6)

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt6/${qt_dir_prefix}" qt_dir)
          message("::set-output name=qt_dir::${qt_dir}")

          function(downloadAndExtract url archive)
            foreach(qt_mirror $ENV{QT_MIRRORS})
              cmake_language(EVAL CODE "
                message(\"Downloading ${url}\")
                file(DOWNLOAD \"${url}\" ./${archive})
              ")
              file(SIZE ./${archive} fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${archive} WORKING_DIRECTORY qt6)
          endfunction()

          foreach(package qtbase qtdeclarative qttools qtsvg qttranslations)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
            )
          endforeach()

          foreach(package qtimageformats qtserialport)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
            )
          endforeach()

          foreach(package qtquicktimeline qtquick3d qt5compat qtshadertools)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
            )
          endforeach()

          # uic depends on libicu56.so
          if ("${{ runner.os }}" STREQUAL "Linux")
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-Rhel7.2-x64.7z"
              icu.7z
            )
          endif()

          file(READ "qt6/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
          string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
          string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
          string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
          string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
          file(WRITE "qt6/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            # deploy "system" runtimes into Qt, so they get deployed as well
            # deploy MSVC
            foreach(file vcruntime140.dll concrt140.dll msvcp140_1.dll msvcp140_2.dll
                         msvcp140_codecvt_ids.dll vcruntime140_1.dll msvcp140.dll)
              file(INSTALL "C:/Windows/System32/${file}"
                   DESTINATION "qt6/${qt_dir_prefix}/bin")
            endforeach()
          endif()

      - name: Build Qt Creator
        shell: pwsh
        run: |
          switch ("${{runner.os}}")
          {
              "Windows" {
                  Write-Output "<+> Setting up MSBuild"
                  # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                  # The setup-msbuild action is not used since it does not set up the path to 'cl'
                  # see: https://github.com/microsoft/setup-msbuild/issues/24
                  ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                  Write-Output "  <-> VS Install Path: ${VS_INST_PATH}"
                  Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                  Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=${{matrix.config.arch}} -no_logo'
              }
          }
          New-Item -Path "." -Name "build-qtcreator" -ItemType "directory"
          Set-Location -Path "build-qtcreator"
          cmake -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}" `
            -DBUILD_PLUGINS_BY_DEFAULT=OFF `
            -DBUILD_LIBRARIES_BY_DEFAULT=OFF `
            -DBUILD_EXECUTABLES_BY_DEFAULT=OFF `
            -DBUILD_TESTS_BY_DEFAULT=OFF `
            -DBUILD_LIBRARY_CPLUSPLUS=ON `
            -DBUILD_LIBRARY_EXTENSIONSYSTEM=ON `
            -DBUILD_LIBRARY_UTILS=ON `
            -DBUILD_PLUGIN_CORE=ON `
            -DBUILD_PLUGIN_TEXTEDITOR=ON `
            -DBUILD_PLUGIN_PROJECTEXPLORER=ON `
            -DBUILD_PLUGIN_CPPEDITOR=ON `
            -DBUILD_LIBRARY_AGGREGATION=ON `
            -DBUILD_LIBRARY_3RD_CPLUSPLUS=ON `
            -DBUILD_LIBRARY_QTCSSH=ON `
            -DBUILD_LIBRARY_CLANGSUPPORT=ON `
            ../qt-creator
          cmake --build .

      - name: Build Plugin
        shell: pwsh
        run: |
          switch ("${{runner.os}}")
          {
              "Windows" {
                  Write-Output "<+> Setting up MSBuild"
                  # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                  # The setup-msbuild action is not used since it does not set up the path to 'cl'
                  # see: https://github.com/microsoft/setup-msbuild/issues/24
                  ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                  Write-Output "  <-> VS Install Path: ${VS_INST_PATH}"
                  Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                  Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=${{matrix.config.arch}} -no_logo'
              }
          }

          New-Item -Path "." -Name "build-plugin" -ItemType "directory"
          Set-Location -Path "build-plugin"
          cmake -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }};../qt-creator;../build-qtcreator" `
            -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" `
            ../SpellChecker-Plugin/
          cmake --build .

      - name: Collect Binaries
        shell: pwsh
        run: |
          ${PLUGIN_DIR_BASE} = "Plugin/"
          ${PLUGIN_ARCHIVE}  = "SpellChecker-Plugin_QtC${env:QT_CREATOR_VERSION}_${env:OS}_${{matrix.config.arch}}"

          switch ("${{runner.os}}")
          {
              "Windows" {
                ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/lib/qtcreator/plugins"
                ${PLUGIN_DIR_BIN} = "${PLUGIN_DIR_BASE}/bin/"
                New-Item -ItemType Directory "${PLUGIN_DIR_OUT}" -Force
                New-Item -ItemType Directory "${PLUGIN_DIR_BIN}" -Force
                Copy-Item -Path "build-plugin/lib/qtcreator/plugins/SpellChecker.dll" -Destination "${PLUGIN_DIR_OUT}/"
                Copy-Item -Path "build-plugin/lib/qtcreator/plugins/libhunspell.dll" -Destination "${PLUGIN_DIR_BIN}/"
                Push-Location ${PLUGIN_DIR_BASE}
                ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.zip"
                7z a "${env:PLUGIN_ARCHIVE_NAME}" bin lib
                Pop-Location
              }
              "Linux" {
                ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/lib/qtcreator/plugins"
                New-Item -ItemType Directory "${PLUGIN_DIR_OUT}" -Force
                Copy-Item -Path "build-plugin/lib/qtcreator/plugins/libSpellChecker.so" -Destination "${PLUGIN_DIR_OUT}/"
                Push-Location ${PLUGIN_DIR_BASE}
                ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.tar.gz"
                7z a -ttar "${PLUGIN_ARCHIVE}.tar" lib
                7z a -tgzip "${env:PLUGIN_ARCHIVE_NAME}" "${PLUGIN_ARCHIVE}.tar"
                Pop-Location
              }
              "macOS" {
                ${PLUGIN_DIR_OUT} = "${PLUGIN_DIR_BASE}/bin/Qt Creator.app/Contents/PlugIns"
                New-Item -Path "${PLUGIN_DIR_OUT}" -ItemType Directory -Force
                Copy-Item -Path "build-plugin/Qt Creator.app/Contents/PlugIns/libSpellChecker.dylib" -Destination "${PLUGIN_DIR_OUT}/"
                Get-ChildItem "${PLUGIN_DIR_OUT}"
                Push-Location ${PLUGIN_DIR_BASE}
                ${env:PLUGIN_ARCHIVE_NAME} = "${PLUGIN_ARCHIVE}.tar.gz"
                7z a -ttar "${PLUGIN_ARCHIVE}.tar" bin
                7z a -tgzip "${env:PLUGIN_ARCHIVE_NAME}" "${PLUGIN_ARCHIVE}.tar"
                Pop-Location
              }
          }
          ${env:PLUGIN_ARCHIVE_FULL} = "${PLUGIN_DIR_BASE}/${env:PLUGIN_ARCHIVE_NAME}"

          Write-Output "PLUGIN_ARCHIVE_FULL=${{github.workspace}}/${env:PLUGIN_ARCHIVE_FULL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "PLUGIN_ARCHIVE_NAME=${env:PLUGIN_ARCHIVE_NAME}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - uses: actions/upload-artifact@v2
        id: upload_artifact
        with:
          path: ${{env.PLUGIN_ARCHIVE_FULL}}
          name: ${{env.PLUGIN_ARCHIVE_NAME}}

      - name: Download release url
        if: contains(github.ref, '/tags/v')
        uses: actions/download-artifact@v2
        with:
          name: release_upload_url.txt
          path: ./

      - name: Set Release Var
        if: contains(github.ref, '/tags/v')
        shell: pwsh
        run: |
          ${RELEASE_URL} = Get-Content ./release_upload_url.txt
          Write-Output "Release URL: ${RELEASE_URL}"
          Write-Output "RELEASE_URL=${RELEASE_URL}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload release artifacts
        if: contains(github.ref, '/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{env.RELEASE_URL}}
          asset_path: ${{env.PLUGIN_ARCHIVE_FULL}}
          asset_name: ${{env.PLUGIN_ARCHIVE_NAME}}
          asset_content_type: application/zip
